;;; ========================================
;;; CMPU-365, Spring 2013
;;; Final Project: Genetic Programing
;;; Name: Eric Lind
;;; ========================================
;;; FILE:  kernel-1.lisp
;;; ========================================

;;; CREATE-INDI-PROG
;;; CREATE-POPULATION
;;; EVALUATE-POP-FITNESS
;;; SORT-POP-BY-FITNESS


;;;   TO-DO!!!
;;;************************************************************
;;;  1. "Grown" trees for indi-progs
;;;  2. "Ramp-up" for indi-progs/create-pop
;;;  3. Top-node-p for create-indi-prog
;;;  4. FITNESS-CASES
;;;  6. "Uniquify" initial generation
;;;  7. Breed new POP
;;;    a. Select individual
;;;    b. COPY-TREE <--- IT'S BUILT IN HAHAHAHAHAHAHAAAA!!!!!!!!
;;;    c. GET-SUBTREE
;;;    d. COUNT-CROSSOVER-POINTS
;;;  8. Mutation?


;;;   DONE
;;;**************************************************
;;;  9. PREVENT DIVISION BY ZERO!!!!!
;;;  5. FITNESS
;;;     a. Standardized: expresses as error (s.t. smaller is better)
;;;     b. Adjusted: between 1 and 0
;;;     c. Normalized: btw 1 and 0 AND sums to 1
;;;     d. b and c are also larger for better individuals




;;;************************************************************
;;;   GLOBALS
;;;************************************************************

;;; *GOAL*
;;;----------------------
;;; For this early vearion of the kernel, the test case is 
;;; creating a function with the largest numerical output
;;; possible.  With a depth of 3 and a max value in the 
;;; terminal set of 5, that value is 5^8 or 309625.  This
;;; is the value that will be used to calculate the
;;; standardized fitness.
(defvar *goal* 390625)

;;; *POPULATION*
;;;--------------------------------------
(defvar *population* nil)

;;; POP-SIZE
;;;----------------------------------------
;;(defvar *pop-size* 100)

;;; *HEIGHT*
;;;----------------------------------------
(defvar *height* 3)


;;;************************************************************
;;;  PROTECTED FUNCTIONS
;;;************************************************************


;;; %
;;;============================================================
;;; The protected division function. Returns 1 if user attempts
;;; to divide by zero.

(defun % (numerator denominator)
  "The protected division function"
  (if (= 0 denominator)
      1
      (/ numerator denominator)))





;;;************************************************************
;;;   FUNCTIONS
;;;************************************************************



;;;************************************************************
;;;   CREATE THE POPULATION
;;;************************************************************

;;;============================================================
;;;  INDIVIDUAL-STRUCT
;;;============================================================
;;; The struct to represent an INDIVIDUAL in a population
;;; Fields:
;;;      PROGRAM -- The generated function
;;;      FITNESSES...the fitnesses

(defstruct individual
  program
  (raw-fitness 0)
  (standardized-fitness 0)
  (adjusted-fitness 0)
  (normalized-fitness 0))


;;;============================================================
;;;  CREATE-INDI-PROG
;;;============================================================
;;; Recursively create a function tree from the given function
;;; set and terminal set.
;;;
;;; For this implementation, the function will only
;;; create "full" trees..
;;;
;;;  INPUTS:  FUNCTION-SET, a set of functions
;;;           ARGUMENT-MAP, the number of argumnets each element
;;;            of the FUNCTION-SET takes
;;;           TERMINAL-SET, a set of terminals
;;;           ALLOWABLE-DEPTH, the remaining depth of the tree 
;;;            to be created.
;;;           FULL?, boolean, are we creating full trees or 
;;;            grown trees?
;;;           TOP-NODE?, boolean, T if being called from the root node
;;;            and NIL otherwise. This lets the function be used to
;;;            create parts of trees for mutation.
;;;  OUTPUT:  A new function composed of elements of the given
;;;           sets

(defun create-indi-prog (function-set argument-map 
			 terminal-set allowable-depth 
			 &optional (full? t) (top-node? t))
  
  (labels
      ;; CHOOSE-TERMINAL
      ;;--------------------------
      ;; Returns a random element from TERM-SET
      ;;  INPUTS:  TERM-SET
      ;;  OUTPUT:  an element of TERM-SET
      ((choose-terminal (term-set)
	 (let ((rand (random (length term-set))))
	   ;; Return a random element from TERM-SET
	   (elt term-set rand)))
       
       ;; CREATE-FUNCTION-ARGS
       ;;----------------------------
       ;; Creates the argument list for a function node in the tree
       ;; INPUTS:   NUM-ARGS
       ;;           FUNC-SET
       ;;           ARG-MAP
       ;;           TERM-SET
       ;;           AL-DEP
       ;; OUTPUT:   Arguments for a function       
       (create-function-args (num-args func-set arg-map term-set al-dep)
	 (if (= num-args 0)
	     ;; If there are no args left return NIL
	     nil
	   ;; Else: generate an ARG
	   (cons 
	    ;; Each ARG is a new branch
	    (create-indi-prog func-set arg-map term-set al-dep)
	    ;; The next ARG is the next part of the CONS
	    (create-function-args (- num-args 1)
				  func-set arg-map term-set
				  al-dep)))))
    
    ;; End of LABELS
    ;;-----------------      
    
    (cond
     ;; BC
     ((<= allowable-depth 0)
      ;; We're are the maximum depth so return a terminal
      (choose-terminal terminal-set))
     
     ;; Otherwise, choose a function
     (t
      (let* ((rand (random (length function-set)))
	     (fxn (elt function-set rand))
	     (num-as (elt argument-map rand)))
	;; CONS FXN to ARGS
	(cons fxn
	      ;; ARGS
	      (create-function-args num-as 
				    function-set
				    argument-map 
				    terminal-set 
				    (- allowable-depth 1))))))))


;;;============================================================
;;;  CREATE-POPULATION
;;;============================================================
;;; Iteratively create the population for testing
;;;
;;;  INPUTS:   POP-SIZE
;;;            FUNCTION-SET, a set of functions
;;;            ARGUMENT-MAP, the number of argumnets each element
;;;             of the FUNCTION-SET takes
;;;            TERMINAL-SET, a set of terminals
;;;  OUTPUT:   An array of individuals

(defun create-population (pop-size function-set argument-map terminal-set)
 "Creates the population.  The population is an array of size
 POP-SIZE."
 
 ;; Initialize the population vector
 (let ((population (make-array pop-size)))
   ;; Loop through the pop vector and setf the PROGS
   (dotimes (i pop-size population)
     (let ((prog (create-indi-prog function-set argument-map
				   terminal-set *height*)))
       (setf (svref population i)
	 (make-individual
	  :program prog))))
   
   ;;(setf *population* population)
   ))



;;;************************************************************
;;;   FITNESS
;;;************************************************************

;;;============================================================
;;;  EVALUATE-POP-FITNESS
;;;============================================================
;;; Evaluates the fitness of every individual in a population.
;;;
;;;  INPUTS:  POPULATION, a vector of INDIVUDUALS
;;;           FITNESS-CASES, for this version there is only one
;;;           FITNESS-FXN, just EVAL in this version.
;;;  OUTPUT:  The POPULATION vector with fitnesses

(defun evaluate-pop-fitness (population fitness-fxn &optional (fitness-cases 1))
  "Loops through the population vector and evaluates the fitness 
   of each"
  
  (dotimes (i (length population) population)
    (let* ((indi (svref population i))
	   (indi-prog (individual-program indi))
	   (indi-raw (funcall fitness-fxn indi-prog))
	   (indi-stand (standardized-fitness indi-raw))
	   (indi-adj (adjusted-fitness indi-stand)))
      
      ;; Set the fitness of each INDI
      (setf (individual-raw-fitness indi) indi-raw)
      (setf (individual-standardized-fitness indi) indi-stand)
      (setf (individual-adjusted-fitness indi) indi-adj))))


;;;  STANDARDIZED-FITNESS
;;;============================================================

(defun standardized-fitness (raw-fitness)  ;; & optional goal
  "Calculates the standardized fitness of an individual (program)."
  ;; The standardized fitness, is really just the raw fitness 
  ;; expressed in a way s.t. a smaller value is better.  In this 
  ;; case it's just the error.
  (abs (- *goal* raw-fitness)))


;;;  ADJUSTED-FITNESS
;;;============================================================

(defun adjusted-fitness (standardized-fitness)
  "Calculates the adjusted fitness of an individual (program)."
  
  (/ 1.0 (+ 1.0 standardized-fitness)))


;;;============================================================
;;;  NORMALIZE-POPULATION-FITNESS
;;;============================================================

(defun normalize-population-fitness (population)
  "Calculates the normalized fitness of all of the individuals
  in a population."
  
  (let ((sum-of-adj-fitness 0.0))
    ;; Loop through the population and sum their adj-fitnesses
    (dotimes (i (length population))
      (let ((indi (svref population i)))
	(incf sum-of-adj-fitness 
	      (individual-adjusted-fitness indi))))
    
    ;; set the normalized fitness of each individual
    (dotimes (j (length population) population)
      (let ((indi (svref population j)))
	(setf (individual-normalized-fitness indi)
	  (/ (individual-adjusted-fitness indi)
	     sum-of-adj-fitness))))))


;;;============================================================
;;;  SORT-POP-BY-FITNESS
;;;============================================================
;;; Destructively sorts the population according to normalized
;;; fitness
;;;
;;;  INPUTS:  POPULATION, a vector of INDIVUDUALS
;;;  OUTPUT:  The POPULATION vector sorted by (normalized) fitness

(defun sort-pop-by-fitness (population)
  "Sorts the population by (normalized) fitness. Destructively."
  
  (sort population #'> :key #'individual-normalized-fitness))



;;;************************************************************
;;;   BREEDING
;;;************************************************************


;;;============================================================
;;;  SELECT-FITNESS-PROP-INDIVIDUAL
;;;============================================================
;;; Selects an individual in the given population with 
;;; a normalized fitness greater than the given value.
;;;
;;;  INPUTS:   FITNESS-LEVEL, int
;;;            POPULATION        
;;;  OUTPUT:   An INDIVIDUAL

(defun find-fitness-proportionate-individual (fitness-level population)
  "Finds an individual in the specified population whose
   normalized fitness is greater than the specified value.
   All we need to do is count along the population from the
   beginning adding up the fitness until we get past the
   specified point."
  (let* ((pop-size (length population))
	 (sum-of-fitness 0.0))
    
    (let ((index-of-selected-individual
           (do ((index 0 (+ index 1)))
               ;; Exit condition
               ((or (>= index population-size)
                    (>= sum-of-fitness after-this-fitness))
                (if (>= index population-size)
                    (- (length population) 1)
                    (- index 1)))
            ;; Body.  Sum up the fitness values.
            (incf sum-of-fitness
                  (individual-normalized-fitness
                    (aref population index))))))
     (individual-program
       (aref population index-of-selected-individual)))))



;;;============================================================
;;;  COUNT-CROSSOVER-POINTS
;;;============================================================
;;; Counts all of the crossover points in a tree (program). 
;;; For our purposes, each node in our tree (either a function
;;; or a terminal) is considered a crossover point.  The 
;;; the numbering is done depth-first from left to right.
;;;
;;;  INPUTS:  PROGRAM, a LISP S-expression
;;;  OUTPUT:  An int givng the number of corssover points 
;;;            (or nodes).

(defun count-crossover-points (program)
  "Counts all of the crossover points in a tree (program)."
  
  (if (consp program)
      (+ 1 
	 (reduce #'+ 
		 (mapcar #'count-crossover-points 
			 (rest program))))
    ;; else
    1))

;;;============================================================
;;;  TREE-DEPTH
;;;============================================================
;;; Finds the depth of the deepest branch of the given tree
;;; (program).
;;;
;;;  INPUTS:  TREE, a LISP S-expression
;;;  OUTPUT:  An int givng the depth of the deepest branch

(defun tree-depth (tree)
  "Returns the depth of the deepest/longest branch of the 
  given tree (program)."
  
  (if (consp tree)
      (+ 1 
	 (if (rest tree)
	       (apply #'max 
		      (mapcar #'max-depth-of-tree (rest tree)))
	   ;; Else
	   0))
    ;; Else
    1))







;;;************************************************************
;;;   TESTS
;;;************************************************************

(defvar *f-set* '(+ - * %))

(defvar *a-map* '(2 2 2 2))

(defvar *t-set* '(1 2 3 4 5))

(defvar *pop-size* 10)


;;; TESTS for CREATE-POPULATION
;;;--------------------------------
(print-test-header "CREATE-POPULATION")
;;(tester '(create-population *pop-size* *f-set* *a-map* *t-set*))

(defvar *test-pop* (create-population *pop-size* *f-set* *a-map* *t-set*))



;;; TESTS for EVALUATE-POP-FITNESS
;;;--------------------------------
(print-test-header "EVELUATE-POP-FITNESS")
;;(tester '(evaluate-pop-fitness *test-pop* #'eval))

(defvar *test-evaluated-pop* (evaluate-pop-fitness *test-pop* #'eval))


;;; TESTS for NORMALIZED-POPULATION-FITNESS
;;;----------------------------------------
(print-test-header "NORMALIZED-POP-FITNESS")

(defvar *test-normalized-pop* (normalize-population-fitness *test-evaluated-pop*))

;;; TESTS for SORT-POP-BY-FITNESS
;;;-------------------------------
(print-test-header "SORT-POP-BY-FITNESS")
(tester '(sort-pop-by-fitness *test-normalized-pop*))